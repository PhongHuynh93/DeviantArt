apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
    // Custom reports directory can be specfied like this:
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

project.afterEvaluate {

    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants')
            .all { variant ->
                def variantName = variant.name
                def unitTestTask = "test${variantName.capitalize()}UnitTest"
                def androidTestCoverageTask = "connected${variantName.capitalize()}AndroidTest"

                tasks.create(name: "${unitTestTask}Coverage", type: JacocoReport, dependsOn: [
                        "$unitTestTask",
                        ":domain:testDebugUnitTest",
                        ":data:testDebugUnitTest"
                ]) {
                    group = "Reporting"
                    description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build"

                    reports {
                        html.enabled = true
                        xml.enabled = true
                        csv.enabled = true
                    }

                    def fileFilter = [
                            '**/R.class',
                            '**/R$*.class',
                            '**/BuildConfig.*',
                            '**/Manifest*.*',
                            '**/*Test*.*',
                            '**/com/example/databinding/*',
                            '**/com/example/generated/callback/*',
                            '**/android/databinding/*',
                            '**/androidx/databinding/*',
                            '**/di/module/*',
                            '**/*MapperImpl*.*',
                            '**/*$ViewInjector*.*',
                            '**/*$ViewBinder*.*',
                            '**/BuildConfig.*',
                            '**/*Component*.*',
                            '**/*BR*.*',
                            '**/Manifest*.*',
                            '**/*$Lambda$*.*',
                            '**/*Companion*.*',
                            '**/*Module.*',
                            '**/*Dagger*.*',
                            '**/*MembersInjector*.*',
                            '**/*Fragment$*.*',
                            '**/*Activity*.*',
                            '**/*_Factory*.*',
                            '**/*_Provide*Factory*.*',
                            '**/*Extensions*.*',
                            '**/*$Result.*', /* filtering `sealed` and `data` classes */
                            '**/*$Result$*.*',/* filtering `sealed` and `data` classes */
                            '**/model/**',/* filtering model classes */
                            '**/usecase/**',/* filtering use case classes */
                            '**/*Worker*.*',/* filter workmanager */
                            '**/fake/**',
                            '**/AppServiceImpl.*',/* filter repository impl */
                            '**/AppRepositoryImpl.*',
                            '**/SettingRepositoryImpl.*',
                            '**/UserRepositoryImpl.*',
                            '**/util/**',
                            '**/datasource/**', /* filter datasource */
                    ]

                    classDirectories.setFrom(files([
                            fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: fileFilter)
                                    .filter({ file -> file.name.contains('ViewModel') })
                            ,
                            fileTree(dir: "$project.rootDir/domain/build/tmp/kotlin-classes/debug", excludes: fileFilter),
                            fileTree(dir: "$project.rootDir/data/build/tmp/kotlin-classes/debug", excludes: fileFilter),
                    ]))

                    def coverageSourceDirs = [
                            "$project.rootDir/app/src/main/java",
                            "$project.projectDir/src/${variantName}/java",
                            "$project.rootDir/domain/src/main/java",
                            "$project.rootDir/data/src/main/java",

                    ]
                    additionalSourceDirs.setFrom(files(coverageSourceDirs))
                    sourceDirectories.setFrom(files(coverageSourceDirs))

                    def uiTestsApp = fileTree(dir: "${buildDir}/outputs/code_coverage/${variantName}AndroidTest/connected/", includes: ["**/*.ec"])
                    def uiTestsDomain = fileTree(dir: "${project.rootDir}/domain/outputs/code_coverage/${variantName}AndroidTest/connected/", includes: ["**/*.ec"])
                    def uiTestsData = fileTree(dir: "${project.rootDir}/data/outputs/code_coverage/${variantName}AndroidTest/connected/", includes: ["**/*.ec"])

                    executionData(files([
                            "$project.buildDir/jacoco/${unitTestTask}.exec",
                            "$project.rootDir/domain/build/jacoco/testDebugUnitTest.exec",
                            "$project.rootDir/data/build/jacoco/testDebugUnitTest.exec"
                    ]))
                }
            }
}